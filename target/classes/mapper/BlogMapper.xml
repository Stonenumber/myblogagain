<?xml version="1.0" encoding="UTF-8" ?>
<!DOCTYPE mapper
        PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN"
        "http://mybatis.org/dtd/mybatis-3-mapper.dtd">
<mapper namespace="com.stone.blog.dao.BlogMapper">

  <resultMap id="blog" type="com.stone.blog.po.Blog">
    <id property="id" column="id"/>
    <result property="title" column="title"/>
      <result property="description" column="description"/>
      <result property="views" column="views"/>
      <result property="content" column="content"/>

      <result property="flag" column="flag"/>
      <result property="typeId" column="type_id"/>
      <result property="userId" column="user_id"/>
      <result property="tagIds" column="tag_ids"/>
      <result property="firstPicture" column="first_picture"/>

      <result property="recommend" column="recommend"/>
      <result property="commentable" column="commentable"/>
      <result property="published" column="published"/>
      <result property="shareStatement" column="share_statement"/>
      <result property="privately" column="privately"/>
      <result property="appreciation" column="appreciation"/>

      <result property="createTime" column="create_time"/>
      <result property="updateTime" column="update_time"/>

    <association property="type" javaType="com.stone.blog.po.Type">
      <id property="id" column="typeid"/>
      <result property="name" column="typename"/>
    </association>
    <association property="user" javaType="com.stone.blog.po.User">
      <id property="id" column="uid"/>
      <result property="nickname" column="nickname"/>
      <result property="username" column="username"/>
      <result property="email" column="email"/>
      <result property="avatar" column="avatar"/>
    </association>
    <collection property="tags" ofType="com.stone.blog.po.Tag">
      <id property="id" column="tagid"/>
      <result property="name" column="tagname"/>
    </collection>
  </resultMap>

    <select id="getBackBlog" resultMap="blog"> /*后台展示博客详情*/
        select b.id, b.published, b.flag, b.title, b.content, b.type_id,
         b.first_picture, b.description, b.recommend,
         b.share_statement, b.appreciation, b.commentable, tag.id tagid, tag.name tagname
        from t_blog b, t_blog_tags tb, t_tag tag where  b.id = #{id} and b.id = tb.blogs_id and tag.id = tb.tags_id;
    </select>

    <select id="getBackBlogTemp" resultMap="blog"> /*后台展示博客详情*/
        select b.id, b.published, b.flag, b.title, b.content, b.type_id,
         b.first_picture, b.description, b.recommend,
         b.share_statement, b.appreciation, b.commentable
        from t_blog b where b.id = #{id};
    </select>

    <select id="getBackAll" resultMap="blog">  /*后台展示所有blog*/
        select b.id, b.title, t.name typename, b.create_time, b.recommend, b.published, b.privately
        from t_blog b, t_type t
        where b.type_id = t.id order by b.create_time desc   /*博客类型id=类型id*/
    </select>

    <select id="getBackAllTemp" resultMap="blog">  /*后台展示所有blog*/
       select * from t_blog order by create_time desc   /*博客类型id=类型id*/
    </select>




    <delete id="deleteById" >
        delete from t_blog where id = #{id}
    </delete>

  <select id="getFrontAll" resultMap="blog">  /*主页博客展示*/
        select b.id, b.title, b.first_picture, b.views, b.create_time, b.description,
        t.name typename, t.id typeid,
        u.nickname, u.avatar
        from t_blog b, t_type t, t_user u
        where b.type_id = t.id and  u.id = b.user_id and b.privately = 0 order by b.create_time desc
    </select>



  <select id="getByTypeId" resultMap="blog">
        select b.id, b.title, b.first_picture, b.views, b.update_time, b.description,
        t.name typename, t.id typeid,
        u.nickname, u.avatar
        from t_blog b, t_type t, t_user u
        where b.type_id = t.id and u.id = b.user_id and b.type_id = #{typeId} order by b.create_time desc
    </select>

  <select id="getByTagId" resultMap="blog">
        select b.id, b.title, b.first_picture, b.views, b.create_time, b.description,
        t.name typename, t.id typeid,
        t1.name tagname, t1.id tagid,
        u.nickname, u.avatar
        from t_blog b, t_type t, t_user u, t_blog_tags tb, t_tag t1
        where b.type_id = t.id and u.id = b.user_id and tb.blogs_id = b.id and tb.tags_id = t1.id and t1.id = #{tagId}
        order by b.create_time desc
    </select>

  <select id="getByRecommend" resultMap="blog">
        select id, title from t_blog where recommend = 1 order by update_time desc limit 4;
    </select>

    <select id="getByPrivately" resultMap="blog">
         select b.id, b.title, b.first_picture, b.views, b.create_time, b.description,
        t.name typename, t.id typeid,
        u.nickname, u.avatar
        from t_blog b, t_type t, t_user u
        where b.type_id = t.id and u.id = b.user_id order by b.update_time desc
    </select>


  <select id="getFrontBlog" resultMap="blog">  /*博客详情*/
        select b.id, b.first_picture, b.flag, b.title, b.content, b.views,
        b.create_time,b.commentable, b.share_statement, b.appreciation,
        u.nickname, u.avatar,
        tag.id tagid, tag.name tagname
        from t_blog b, t_user u, t_tag tag, t_blog_tags tb
        where b.id = #{id} and u.id = b.user_id and tb.blogs_id = b.id and tag.id = tb.tags_id
    </select>

  <!--前台搜索，根据名字或者内容搜索-->
  <select id="getSearchBlog" resultMap="blog">
    <bind name="pattern" value="'%' + query + '%'" />
    select b.id, b.title, b.first_picture, b.views, b.update_time, b.description,
    t.name typename,
    u.nickname, u.avatar
    from t_blog b, t_type t, t_user u
    where b.type_id = t.id and  u.id = b.user_id and (b.title like #{pattern} or b.content like  #{pattern})
    order by b.update_time desc
  </select>

   <!--后台搜索，根据名字，类型或者推荐搜索-->
  <select id="searchAllBlog" parameterType="com.stone.blog.po.Blog" resultMap="blog">
    select b.id, b.title, b.create_time, t.name typename, b.recommend, b.published, b.privately, u.avatar, u.nickname
    from t_blog b ,t_type t, t_user u
    <where>
      <if test="1 == 1">
        b.type_id = t.id and b.user_id = u.id/*博客类型id=类型id*/
      </if>
      <if test="typeId != null">
        and b.type_id = #{typeId}       /*根据博客类型查询*/
      </if>
      <if test="recommend != null">
        and b.recommend = #{recommend}   /*根据博客推荐查询*/
      </if>
      <if test="title != null">
          <bind name="pattern" value="'%' + title + '%'" />    /*模糊查询*/
        and b.title like #{pattern}   /*根据博客title模糊查询*/
      </if>
    </where>
  </select>

  <update id="update" parameterType="com.stone.blog.po.Blog">
        update t_blog set published = #{published},flag = #{flag} ,
        title = #{title}, content = #{content}, type_id = #{typeId},
        first_picture = #{firstPicture} , description = #{description} , recommend = #{recommend} ,
        share_statement = #{shareStatement}, appreciation = #{appreciation},
        commentable = #{commentable} ,update_time = #{updateTime} where id = #{id};
    </update>

  <!--useGeneratedKeys="true"；使用自增主键获取主键值策略
      keyProperty；指定对应的主键属性，也就是mybatis获取到主键值以后，将这个值封装给javaBean的哪个属性
  -->
  <insert id="save" parameterType="com.stone.blog.po.Blog" useGeneratedKeys="true" keyProperty="id">
        insert into t_blog (title, content, first_picture, flag,
        views, appreciation, share_statement, commentable,published,
        recommend, create_time, update_time, type_id, user_id, description)
        values (#{title}, #{content}, #{firstPicture}, #{flag}, #{views}, #{appreciation},
        #{shareStatement}, #{commentable}, #{published}, #{recommend}, #{createTime},
        #{updateTime}, #{typeId}, #{userId}, #{description});
    </insert>

  <select id="findGroupYear" resultType="String">
        select DATE_FORMAT(b.create_time, '%Y') from t_blog b order by b.create_time asc
    </select>

  <select id="findByYear" resultMap="blog">
        select b.title, b.create_time, b.id, b.flag
        from t_blog b
        where DATE_FORMAT(b.create_time, "%Y") = #{year}
    </select>

  <select id="updateViews" resultType="Integer">
        update t_blog set views = views + 1 where id = #{id};
    </select>

  <select id="findByPrivately" resultMap="blog">
        select DATE_FORMAT(b.update_time, '%Y') from t_blog b order by b.update_time desc
    </select>



    <select id="topAppreciation" resultMap="blog">
        select id, title from t_blog order by update_time desc limit #{num};
    </select>


    <delete id="deleteBlogTags">/*删除一个blog所有相关的tag*/
        delete from t_blog_tags where blogs_id = #{blogId}
    </delete>

    <insert id="saveBlogAndTag" parameterType="com.stone.blog.po.BlogAndTag">
        insert into t_blog_tags (tags_id, blogs_id) values (#{tagId},#{blogId});
    </insert>


</mapper>
